// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

// Auto-generated initialization code.

final ffi.Pointer<T> Function<T extends ffi.NativeType>(String sym) jniLookup =
    ProtectedJniExtensions.initGeneratedLibrary("jni_location");

/// from: ch.masus.libs.JNILocation
class JNILocation extends jni.JObject {
  @override
  late final jni.JObjType<JNILocation> $type = type;

  JNILocation.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  /// The type which includes information such as the signature of this class.
  static const type = $JNILocationType();
  static final _new0 = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "JNILocation__new0")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory JNILocation() {
    return JNILocation.fromReference(_new0().reference);
  }

  static final _sayHi = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "JNILocation__sayHi")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void sayHi()
  void sayHi() {
    _sayHi(reference.pointer).check();
  }
}

final class $JNILocationType extends jni.JObjType<JNILocation> {
  const $JNILocationType();

  @override
  String get signature => r"Lch/masus/libs/JNILocation;";

  @override
  JNILocation fromReference(jni.JReference reference) =>
      JNILocation.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($JNILocationType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($JNILocationType) && other is $JNILocationType;
  }
}
